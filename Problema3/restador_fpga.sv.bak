module restador_fpga (
	input logic clk,            // Reloj
	input logic reset,        // Reset asincrónico
	input logic decrement_btn,  // Botón para decrementar
	// input logic [5:0] init_value, // Valor inicial (puede ser ajustado con switches)
	output logic [6:0] seg7_a,  // Display 7 segmentos (parte de la salida)
	output logic [6:0] seg7_b
);

	// Registros para el valor del contador
	logic [5:0] counter;
	
	// Instanciamos el restador de 6 bits
	subtractor #(
	  .N(6)  // Restador de 6 bits
	) uut (
	  .clk(clk),
	  .reset_n(reset),
	  .enable(decrement_btn),
	  .out(counter)
	);
	
	// Conversión a display 7 segmentos (simple, se puede mejorar)
	function [6:0] to_7seg(input [3:0] val);
	  case(val)
			4'h0: to_7seg = 7'b0000001;
			4'h1: to_7seg = 7'b1001111;
			4'h2: to_7seg = 7'b0010010;
			4'h3: to_7seg = 7'b0000110;
			4'h4: to_7seg = 7'b1001100;
			4'h5: to_7seg = 7'b0100100;
			4'h6: to_7seg = 7'b0100000;
			4'h7: to_7seg = 7'b0001111;
			4'h8: to_7seg = 7'b0000000;
			4'h9: to_7seg = 7'b0000100;
			default: to_7seg = 7'b1111111; // Apagar todo
	  endcase
	endfunction
	
	 // Asignación a displays
	assign seg7_a = to_7seg(counter[5:4]); // Primer 4 bits
	assign seg7_b = to_7seg(counter[3:0]); // Últimos 4 bits
	
endmodule
